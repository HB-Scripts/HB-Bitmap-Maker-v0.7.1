;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
class PopUpWindow_V3 extends PopUpWindow_LayeredWindowDrawingFunctions	{	;class lvl = 6
	;Date Started: Nov 9th, 2023
	;current version 3.1
	static MethodList := 	[	"New" 					,	"Helper"				,	"DrawBitmap" 		
							, 	"PaintBackground" 		, 	"DrawCachedBitmap" 		, 	"UpdateWindow" 
							, 	"ClearWindow" 			,	"CreateWindowGraphics" 	, 	"DestroyWindowsGraphics" 
							, 	"CreateCachedBitmap" 	, 	"DisposeCachedbitmap" 	, 	"Add" 
							, 	"GetControlPosition" 	,	"Show" 					, 	"Hide" 
							, 	"SetMargin" 			, 	"SetFont" 				, 	"SetColor" 
							, 	"SetPosition" 			, 	"UpdateDefaults"  		, 	"UpdateGraphics" 		
							, 	"__Delete"				,	"SetControlList"		,	"Set"
							,	"Get"					, 	"OwnsTips"				, 	"CreateBitmapFromFile"	
							,	"FillEllipse_Solid" 	,	"DrawText_Solid"		,	"FillPolygon_Solid"
							,	"PolygonShapes" 		,	"DrawArrow"				]
																											
	
	__New( options := "" , title := "" , type := "Normal" , defaultsObject := "" ){
		This._SetDefaults()
		This.UpdateDefaults( defaultsObject )
		if( type = 2 || type = "Layered" || type = "L" || type = "LW" || type = "LayeredWindow" || type = "Layered Window" )
			This.WindowType := "LayeredWindow"
		else
			This.WindowType := "NormalWindow"
		This._CreateWindow( options , title )
		This.SetFont()
		This.SetMargin()
		This.SetColor()
		if( This.WindowType = "LayeredWindow" )
			This.CreateWindowGraphics()
		if( This.AutoShow )
			This.Show()
	}
}
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
class PopUpWindow_HelperClass extends PopUpWindow_V3 {
	
	Static 	SelectedMethod := 1 		;{
		,	SelectedListType := 1 
		,	OutputName	:= "Gui1"
		,	Param1 := ""
		,	Param2 := ""
		,	Param3 := ""
		,	Param4 := ""
		,	Param5 := ""
		,	Param6 := ""
		,	Param7 := ""
		,	Param8 := ""
		,	Param9 := ""
	;}
	
	Helper(){
		static cc , textWidth := 110
		cc := PopUpWindow_HelperClass.HelperWindow := New PopUpWindow_V3( "+AlwaysOnTop ",,, {Color:"22262a" , ControlColor: "12161a" , FontColor: "FFFFFF" ,FontSize: 8 } )
		cc.Add( 	"Text" 		, "xm ym w135 r1 " , "Window Object Name:" )
		cc.Add( 	"Edit" 		, "x+m w135 r1 Center" , "Gui1" , "OutputNameEdit" )
		cc.Add( 	"Radio" 	, "xm w135 r1 Group Checked" , "All Methods" )
		cc.Add( 	"ListBox" 	, " xm w300 r20 AltSubmit Section" ,, "MethodListbox" , PopUpWindow_HelperClass._Helper_SetParams.Bind( PopUpWindow_HelperClass ) )
		cc.Add( 	"Text" 		, "w690 Center 0x200 Border " , "Details" , "ExampleOutputText" )
		cc.Add( 	"Edit" 		, "wp r6 -VScroll Disabled" , "Tips`nTips`nTips`nTips" , "DetailsEdit" )	
		cc.Add( 	"Button" 	, "wp r1 " , "Clipboard Method Call" , "ClipButton" , PopUpWindow_HelperClass._Helper_ClipboardMethodCall.Bind( PopUpWindow_HelperClass ) )	
		cc.Add( 	"Text" 		, "x" cc.Controls.MethodListbox.X + cc.Controls.MethodListbox.W + cc.MarginX " ys w" textWidth " Border Section " , "Param 1:" , "Param1Text" )
		cc.Add( 	"Edit" 		, "x+m ys w260 " , "Param 1" , "Param1Edit" )
		cc.Add( 	"Text" 		, "xs  w" textWidth " Border " , "Param 2:" , "Param2Text" )
		cc.Add( 	"Edit" 		, "x+m w260 " , "Param 2" , "Param2Edit" )
		cc.Add( 	"Text" 		, "xs  w" textWidth " Border " , "Param 3:" , "Param3Text" )
		cc.Add( 	"Edit" 		, "x+m w260 " , "Param 3" , "Param3Edit" )
		cc.Add( 	"Text" 		, "xs  w" textWidth " Border " , "Param 4:" , "Param4Text" )
		cc.Add( 	"Edit" 		, "x+m w260 " , "Param 4" , "Param4Edit" )
		cc.Add( 	"Text" 		, "xs  w" textWidth " Border " , "Param 5:" , "Param5Text" )
		cc.Add( 	"Edit" 		, "x+m w260 " , "Param 5" , "Param5Edit" )
		cc.Add( 	"Text" 		, "xs  w" textWidth " Border " , "Param 6:" , "Param6Text" )
		cc.Add( 	"Edit" 		, "x+m w260 " , "Param 6" , "Param6Edit" )
		cc.Add( 	"Text" 		, "xs  w" textWidth " Border " , "Param 7:" , "Param7Text" )
		cc.Add( 	"Edit" 		, "x+m w260 " , "Param 7" , "Param7Edit" )
		cc.Add( 	"Text" 		, "xs  w" textWidth " Border " , "Param 8:" , "Param8Text" )
		cc.Add( 	"Edit" 		, "x+m w260 " , "Param 8" , "Param8Edit" )
		cc.Add( 	"Text" 		, "xs  w" textWidth " Border " , "Param 9:" , "Param9Text" )
		cc.Add( 	"Edit" 		, "x+m w260 " , "Param 9" , "Param9Edit" )
		cc.SetControlList( cc.Controls.MethodListbox , PopUpWindow_V3.MethodList , choose := 1 )
		cc.SetFocus( cc.Controls.MethodListbox )
		cc.Show( "AutoSize" )
		This._Helper_SetParams()
	}
	
	_Helper_GetParams(){
		static controlList := [ "OutputName" , "Param1" , "Param2" , "Param3" , "Param4" , "Param5" , "Param6" , "Param7" , "Param8" , "Param9" ]
		for k , v in controlList
			PopUpWindow_HelperClass[ v ] := PopUpWindow_HelperClass.HelperWindow.Get( PopUpWindow_HelperClass.HelperWindow.Controls[ v "Edit" ] )
	}
	
	_Helper_SetParams(){
		local cc := PopUpWindow_HelperClass
		local MethodLib := PopUpWindow_HelperClass._Helper_GetMethodMap()
		local controlObject := PopUpWindow_HelperClass.HelperWindow.Controls.MethodListbox
		local method := PopUpWindow_V3.MethodList[ PopUpWindow_HelperClass.HelperWindow.Get( controlObject ) ]
		for k , v in [ "Param1" , "Param2" , "Param3" , "Param4" , "Param5" , "Param6" , "Param7" , "Param8" , "Param9" ]	{
			controlObject := PopUpWindow_HelperClass.HelperWindow.Controls[ "Param" A_Index "Edit" ]
			PopUpWindow_HelperClass.HelperWindow.Set( controlObject , "-Disabled" )
			PopUpWindow_HelperClass.HelperWindow.Set( controlObject ,, MethodLib[ method ][ "Default_Param" A_Index ] )
			PopUpWindow_HelperClass[ v ] := MethodLib[ method ][ "Default_Param" A_Index ]
			if( PopUpWindow_HelperClass[ v ] = "" )
				PopUpWindow_HelperClass.HelperWindow.Set( controlObject , "+Disabled" )	
			controlObject := PopUpWindow_HelperClass.HelperWindow.Controls[ v "Text" ]
			PopUpWindow_HelperClass.HelperWindow.Set( controlObject ,, MethodLib[ method ][ "Default_Param" A_Index "_Name" ] )
		}
		PopUpWindow_HelperClass[ "OutputName" ] := PopUpWindow_HelperClass.HelperWindow.Get( PopUpWindow_HelperClass.HelperWindow.Controls[ "OutputNameEdit" ] )
		MethodLib := PopUpWindow_HelperClass._Helper_GetMethodMap()
		controlObject := PopUpWindow_HelperClass.HelperWindow.Controls[ "ExampleOutputText" ]
		PopUpWindow_HelperClass.HelperWindow.Set( controlObject ,, MethodLib[ method ][ "Output" ] )
	}
	
	_Helper_GetMethodMap(){
		local cc := PopUpWindow_HelperClass
		local index := 0
		local MethodLib := {}	
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.New					:=	{ 	Default_Param1		: 	"""+AlwaysOnTop"""		, 	Default_Param1_Name : "Options" 	
											, 	Default_Param2		:	"WinTitle"				, 	Default_Param2_Name : "Title"
											, 	Default_Param3		:	"NormalWindow"			, 	Default_Param3_Name : "WindowType"
											, 	Default_Param4		:	"{ AutoShow: 1 , X: ""Center"" , Y: ""Center"" , W: A_ScreenWidth / 2 , H: A_ScreenHeight / 2 , Color: ""22262a"" }"	, 	Default_Param4_Name : "DefaultsObject" 
											,	Output				:	cc.OutputName " := New PopUpWindow_V3( " cc.Param1 " , " cc.Param2 " , " cc.Param3 " , " cc.Param4 " )" 	}	
		;~ ;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|					
		MethodLib.Helper 				:= 	{ 	Output				: 	"PopUpWindow_HelperClass.Helper()"	}	
		;~ ;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|					
		MethodLib.DrawBitmap			:=	{ 	Default_Param1 		: 	"pBitmap := """			, 	Default_Param1_Name 	: 	"pBitmap" 
											,	Default_Param2 		: 	"0"						, 	Default_Param2_Name 	: 	"X_Position" 
											,	Default_Param3 		: 	"0"						, 	Default_Param3_Name 	: 	"Y_Position" 
											,	Default_Param4 		: 	cc.OutputName ".W"		, 	Default_Param4_Name 	: 	"W_Position" 
											,	Default_Param5 		: 	cc.OutputName ".H"		, 	Default_Param5_Name 	: 	"H_Position" 
											,	Default_Param6 		: 	false					, 	Default_Param6_Name 	:	"DisposeBitmap" 
											,	Default_Param7 		: 	false					, 	Default_Param7_Name 	: 	"AutoUpdate" 
											, 	Output				:	cc.OutputName ".DrawBitmap( " cc.Param1 " , { X: " cc.Param2  " , Y: " cc.Param3 " , W: " cc.Param4 " , H: " cc.Param5 " } , dispose := " cc.Param6 " , autoUpdate := " cc.Param7 " )"	} 					
		;~ ;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.PaintBackground		:=	{	"Default_Param" ( index := 1 )	:	"0xFF000000" 	,	"Default_Param" index "_Name" 	:	"Color"
											,	"Default_Param" ++index			:	false 			,	"Default_Param" index "_Name" 	:	"AutoUpdate"	
											,	Output							:	cc.OutputName ".PaintBackground( BGColor := " cc.param1 " , AutoUpdate := " cc.Param2 " ) `;{ Color: " cc.Param1 " , X: 2 , Y: 2 , W: " cc.OutputName ".W - 4 , H: " cc.OutputName ".H - 4 , Roundness: 10 }"	}	
		;~ ;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.DrawCachedBitmap		:= 	{	"Default_Param" ( index := 1 )	:	false 		,	"Default_Param" index "_Name" 	:	"AutoUpdate"
											, 	Output							:	cc.OutputName ".DrawCachedBitmap( autoUpdate := " cc.Param1 " )"	}		
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.UpdateWindow			:=	{	"Default_Param" ( index := 1 )	:	"255" 		,	"Default_Param" index "_Name" 	:	"Alpha"
											, 	Output							:	cc.OutputName ".UpdateWindow( alpha := " cc.Param1 " )"	}	
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.ClearWindow			:= 	{	"Default_Param" ( index := 1 )	:	false 		,	"Default_Param" index "_Name" 	:	"AutoUpdate"
											, 	Output							:	cc.OutputName ".ClearWindow( autoUpdate := " cc.Param1 " )"		}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.CreateWindowGraphics	:=	{	Output							:	cc.OutputName ".CreateWindowGraphics()"	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.DestroyWindowsGraphics:=	{	Output							:	cc.OutputName ".DestroyWindowsGraphics()" 	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.CreateCachedBitmap	:=	{	"Default_Param" ( index := 1 )	:	"pBitmap" 	,	"Default_Param" index "_Name" 	:	"pBitmap"
											,	"Default_Param" ++index			:	false 		,	"Default_Param" index "_Name" 	:	"Dispose"
											, 	Output							:	cc.OutputName ".CreateCachedBitmap( " cc.Param1 " , Dispose := " cc.Param2 " )"	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.DisposeCachedbitmap 	:=	{	Output							:	cc.OutputName ".DisposeCachedbitmap()" 	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.Add					:=	{	"Default_Param" ( index := 1 )	:	"controlType := ""Button""" 	,	"Default_Param" index "_Name" 	:	"ControlType"
											,	"Default_Param" ++index			:	"options := """"" 				,	"Default_Param" index "_Name" 	:	"Options"
											,	"Default_Param" ++index			:	"displayValue := """"" 			,	"Default_Param" index "_Name" 	:	"DisplayValue"
											,	"Default_Param" ++index			:	"controlName := """"" 			,	"Default_Param" index "_Name" 	:	"ControlName"
											,	"Default_Param" ++index			:	"label := """"" 				,	"Default_Param" index "_Name" 	:	"Label"
											,	"Default_Param" ++index			:	"rows := """"" 					,	"Default_Param" index "_Name" 	:	"Rows"
											, 	Output							:	cc.OutputName ".Add( " cc.Param1 " , " cc.Param2 " , " cc.Param3 " , " cc.Param4 " , " cc.Param5 " , " cc.Param6 " )"	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.GetControlPosition 	:=	{	"Default_Param" ( index := 1 )	:	"controlObject" 				,	"Default_Param" index "_Name" 	:	"ControlObject"
											, 	Output							:	cc.OutputName ".GetControlPosition( " cc.Param1 " )"	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.Show					:=	{	"Default_Param" ( index := 1 )	:	"options := """"" 				,	"Default_Param" index "_Name" 	:	"Options"
											,	"Default_Param" ++index			:	"title := """"" 				,	"Default_Param" index "_Name" 	:	"Title"
											,	"Default_Param" ++index			:	"transparency :=  255" 			,	"Default_Param" index "_Name" 	:	"Transparency"
											, 	Output							:	cc.OutputName ".Show( " cc.Param1 " , " cc.Param2 " , " cc.Param3 " )"	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.Hide					:=	{	Output							:	cc.OutputName ".Hide()" 	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.SetMargin				:=	{	"Default_Param" ( index := 1 )	:	10 								,	"Default_Param" index "_Name" 	:	"MarginX"
											,	"Default_Param" ++index			:	10 								,	"Default_Param" index "_Name" 	:	"MarginY"
											, 	Output							:	cc.OutputName ".SetMargin( " cc.Param1 " , " cc.Param2 " )"		}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.SetFont				:=	{	"Default_Param" ( index := 1 )	:	"type := """"" 					,	"Default_Param" index "_Name" 	:	"Type"
											,	"Default_Param" ++index			:	"size := """"" 					,	"Default_Param" index "_Name" 	:	"Size"
											,	"Default_Param" ++index			:	"color :=  """"" 				,	"Default_Param" index "_Name" 	:	"Color"
											,	"Default_Param" ++index			:	"options :=  """""				,	"Default_Param" index "_Name" 	:	"Options"
											, 	Output							:	cc.OutputName ".SetFont( " cc.Param1 " , " cc.Param2 " , " cc.Param3 " , " cc.Param4 " )"	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.SetColor				:=	{	"Default_Param" ( index := 1 )	:	"color := ""22262A""" 			,	"Default_Param" index "_Name" 	:	"Color"
											,	"Default_Param" ++index			:	"controlColor := ""12161A""" 	,	"Default_Param" index "_Name" 	:	"ControlColor"
											, 	Output							:	cc.OutputName ".SetColor( " cc.Param1 " , " cc.Param2 " )"		}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.SetPosition 			:=	{	"Default_Param" ( index := 1 )	:	"x_or_Rectobj := """"" 			,	"Default_Param" index "_Name" 	:	"X_Or_RectObject"
											,	"Default_Param" ++index			:	"y := """"" 					,	"Default_Param" index "_Name" 	:	"Y"
											,	"Default_Param" ++index			:	"w :=  """"" 					,	"Default_Param" index "_Name" 	:	"W"
											,	"Default_Param" ++index			:	"h :=  """""					,	"Default_Param" index "_Name" 	:	"H"
											, 	Output							:	cc.OutputName ".SetPosition( " cc.Param1 " , " cc.Param2 " , " cc.Param3 " , " cc.Param4 " )"	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.UpdateDefaults 		:=	{	"Default_Param" ( index := 1 )	:	"defaultsObject" 				,	"Default_Param" index "_Name" 	:	"DefaultsObject"
											, 	Output							:	cc.OutputName ".UpdateDefaults( " cc.Param1 " )"	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.UpdateGraphics 		:=	{	Output							:	cc.OutputName ".UpdateGraphics()" 	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.__Delete				:=	{	Output							:	cc.OutputName " := """"" 	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.SetControlList		:=	{	"Default_Param" ( index := 1 )	:	"controlObject" 				,	"Default_Param" index "_Name" 	:	"ControlObject"
											,	"Default_Param" ++index			:	"list := """"" 					,	"Default_Param" index "_Name" 	:	"List"
											,	"Default_Param" ++index			:	"choose := """"" 				,	"Default_Param" index "_Name" 	:	"Choose"
											, 	Output							:	cc.OutputName ".SetControlList( " cc.Param1 " , " cc.Param2 " , " cc.Param3 " )"	}	
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.Set					:=	{	"Default_Param" ( index := 1 )	:	"controlObject" 				,	"Default_Param" index "_Name" 	:	"ControlObject"
											,	"Default_Param" ++index			:	"subCommand := """"" 			,	"Default_Param" index "_Name" 	:	"SubCommand"
											,	"Default_Param" ++index			:	"value := """"" 				,	"Default_Param" index "_Name" 	:	"Value"
											, 	Output							:	cc.OutputName ".Set( " cc.Param1 " , " cc.Param2 " , " cc.Param3 " )"	}	
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.Get					:=	{	"Default_Param" ( index := 1 )	:	"controlObject" 			,	"Default_Param" index "_Name" 	:	"ControlObject"
											,	"Default_Param" ++index			:	"subCommand := """"" 		,	"Default_Param" index "_Name" 	:	"SubCommand"
											, 	Output							:	cc.OutputName ".SetColor( " cc.Param1 " , " cc.Param2 " )"		}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.OwnsTips				:=	{	Output							:	cc.OutputName ".OwnsTips()" 	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.CreateBitmapFromFile	:=	{	"Default_Param" ( index := 1 )	:	"path := """"" 				,	"Default_Param" index "_Name" 	:	"ImageFilePath"
											, 	Output							:	cc.OutputName ".CreateBitmapFromFile( """ cc.Param1 """ )"	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.DrawText_Solid		:=	{	"Default_Param" ( index := 1 )	:	"""SampleText""" 				,	"Default_Param" index "_Name" 	:	"Text"
											,	"Default_Param" ++index			:	"rectObject" 					,	"Default_Param" index "_Name" 	:	"RectObject"
											,	"Default_Param" ++index			:	"fontObject := """""			,	"Default_Param" index "_Name" 	:	"FontObject"
											,	"Default_Param" ++index			:	"offset := 0"					,	"Default_Param" index "_Name" 	:	"Offset"
											,	"Default_Param" ++index			:	"bottomColor := ""0xFF000000"""	,	"Default_Param" index "_Name" 	:	"BottomColor"
											,	"Default_Param" ++index			:	"AutoUpdate := 0"				,	"Default_Param" index "_Name" 	:	"AutoUpdate"
											, 	Output							:	cc.OutputName ".DrawText_Solid( " cc.Param1 " , " cc.Param2 " , " cc.Param3 " , " cc.Param4 " , " cc.Param5 " , " cc.Param6 " )"	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.FillEllipse_Solid		:=	{	"Default_Param" ( index := 1 )	:	"Color := ""0xFFFF0000""" 		,	"Default_Param" index "_Name" 	:	"Color"
											,	"Default_Param" ++index			:	"x_Or_RectObject := 0" 			,	"Default_Param" index "_Name" 	:	"x_Or_RectObject"
											,	"Default_Param" ++index			:	"y := 0"						,	"Default_Param" index "_Name" 	:	"Y_Position"
											,	"Default_Param" ++index			:	"w := 10"						,	"Default_Param" index "_Name" 	:	"Width"
											,	"Default_Param" ++index			:	"h := 10"						,	"Default_Param" index "_Name" 	:	"Height"
											,	"Default_Param" ++index			:	"AutoUpdate := 0"				,	"Default_Param" index "_Name" 	:	"AutoUpdate"
											, 	Output							:	cc.OutputName ".FillEllipse_Solid( " cc.Param1 " , " cc.Param2 " , " cc.Param3 " , " cc.Param4 " , " cc.Param5 " , " cc.Param6 " )"	}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.FillPolygon_Solid		:=	{	"Default_Param" ( index := 1 )	:	"Points := ""50 , 50 | 100 , 100 | 150 , 50 | 50 , 50 """ 	,	"Default_Param" index "_Name" 	:	"Points"
											,	"Default_Param" ++index			:	"color := ""0xFF000000""" 		,	"Default_Param" index "_Name" 	:	"Color"
											, 	Output							:	cc.OutputName ".FillPolygon_Solid( " cc.Param1 " , " cc.Param2 " )"		}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		MethodLib.PolygonShapes			:=	{	"Default_Param" ( index := 1 )	:	"homeVector := { X: 10 , Y: 10 }" ,	"Default_Param" index "_Name" 	:	"HomeVector"
											,	"Default_Param" ++index			:	"color := ""0xFF000000""" 		,	"Default_Param" index "_Name" 	:	"Color"
											,	"Default_Param" ++index			:	"radius := 100" 				,	"Default_Param" index "_Name" 	:	"Radius"
											,	"Default_Param" ++index			:	"startAngle := 0" 				,	"Default_Param" index "_Name" 	:	"StartAngle"
											,	"Default_Param" ++index			:	"sides := 4" 					,	"Default_Param" index "_Name" 	:	"Sides"
											,	"Default_Param" ++index			:	"returnString := 1" 			,	"Default_Param" index "_Name" 	:	"ReturnString"
											,	"Default_Param" ++index			:	"addExtraWrapArm := 1" 			,	"Default_Param" index "_Name" 	:	"AddExtraWrapArm"
											,	"Default_Param" ++index			:	"returnWinSetRegion := 0" 		,	"Default_Param" index "_Name" 	:	"ReturnWinSetRegion"
											,	"Default_Param" ++index			:	"autoUpdate := 0" 				,	"Default_Param" index "_Name" 	:	"AutoUpdate"
											, 	Output							:	cc.OutputName ".PolygonShapes( " cc.Param1 " , " cc.Param2 " , " cc.Param3 " , " cc.Param4 " , " cc.Param5 " , " cc.Param6 " , " cc.Param7 " , " cc.Param8 " , " cc.Param9 " )"		}
		;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
		return MethodLib
	}
	
	_Helper_ClipboardMethodCall( ){
		local MethodLib 
		local controlObject 
		local method 
		controlObject := PopUpWindow_HelperClass.HelperWindow.Controls.MethodListbox
		method := PopUpWindow_V3.MethodList[ PopUpWindow_HelperClass.HelperWindow.Get( controlObject ) ]
		PopUpWindow_HelperClass._Helper_GetParams()
		MethodLib := PopUpWindow_HelperClass._Helper_GetMethodMap()
		PopUpWindow_HelperClass.HelperWindow.OwnsTips()
		Clipboard := MethodLib[ method ][ "Output" ]
		ToolTip, added to clipboard 
		Sleep, 1000
		ToolTip
	}
	
	
}
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
class PopUpWindow_LayeredWindowDrawingFunctions extends PopUpWindow_LayeredWindowMethods	{
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	DrawBitmap( pBitmap , obj , dispose := 1 , AutoUpdate := 0 ){
		Gdip_DrawImage( This.G , pBitmap , obj.X , obj.Y , obj.W , obj.H )
		if( dispose )
			Gdip_DisposeImage( pBitmap )
		if( Autoupdate )
			This.UpdateWindow()
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	PaintBackground( color := "0xFF000000" , AutoUpdate := 0 ){
		if( isObject( color ) ){
			Brush := Gdip_BrushCreateSolid( ( color.HasKey( "Color" ) ) ? ( color.Color ) : ( "0xFF000000" ) ) 
			if( color.Haskey( "Roundness" ) )
				Gdip_FillRoundedRectangle( This.G , Brush , color.X , color.Y , color.W , color.H , color.Roundness )
			else
				Gdip_FillRectangle( This.G , Brush , color.X , color.Y , color.W , color.H ) 
		}else{
			Brush := Gdip_BrushCreateSolid( color ) 
			Gdip_FillRectangle( This.G , Brush , -1 , -1 , This.W + 2 , This.H + 2 ) 
		}
		Gdip_DeleteBrush( Brush )
		if( AutoUpdate )
			This.UpdateWindow()
		
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	DrawCachedBitmap( AutoUpdate := 0 ){
		DllCall( "gdiplus\GdipDrawCachedBitmap" , "Ptr" , this.G , "Ptr" , This.CachedBitmap , "Int" , 0 , "Int" , 0 )
		if( AutoUpdate )
			This.UpdateWindow()
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	CreateBitmapFromFile( path ){
		return Gdip_CreateBitmapFromFile( path )
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	FillEllipse_Solid( color := "0xFFFF0000" , x_Or_RectObject := 0 , y := 0 , w := 10 , h := 10 , autoUpdate := 0 ){
		local Brush := This._CreateBrush_Solid( color )
		local rectObject := {}
		if( IsObject( x_Or_RectObject ) )
			rectObject := x_Or_RectObject
		else
			rectObject := { X: x_Or_RectObject , Y: y , W: w , H: h }
		This._FillEllipse( Brush , rectObject )
		This._DeleteBrush( Brush )
		if( autoUpdate )
			This.UpdateWindow()
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	_CreateBrush_Solid( color := "0xFFFF0000" ){
		return Gdip_BrushCreateSolid( color )
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	_DeleteBrush( pBrush ){
		Gdip_DeleteBrush( pBrush )
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	_FillEllipse( pBrush , rect ){
		Gdip_FillEllipse( This.G , pBrush , rect.X , rect.Y , rect.W , rect.H )
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	DrawText_Solid( text , rectObject , fontObject := "" , offset := 0 , bottomColor := "0xFF000000" , autoUpdate := 0 ){
		static fObj := { Type: "Arial" , Size: 10 , Color: "0xFF000000" , Options: "" }
		local Brush 
		local k , v 
		
		for	k , v in FontObject	
			fObj[ k ] := v
		
		if( offset != 0 ){
			Brush := This._CreateBrush_Solid( bottomColor )
			This._TextToGraphics( text , rectObject , fObj , Brush , offset )
			This._DeleteBrush( Brush )
		}
		
		Brush := This._CreateBrush_Solid( fObj.Color )
		This._TextToGraphics( text , rectObject , fObj , Brush )
		This._DeleteBrush( Brush )
		
		if( autoUpdate )
			This.UpdateWindow()
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	_TextToGraphics( text , rectObject , fObj , pBrush , offset := 0 , Measure := 0 ){
		local options := "c" pBrush " s" fObj.Size " " fObj.Options " x" rectObject.X + offset " y" rectObject.Y + offset
		;~ MsgBox, % "Text: " text "`nW: " rectObject.W "`nH: " rectObject.H "`nG: " This.G "`nType: " fObj.Type 
		Gdip_TextToGraphics( This.G , text , options , fObj.Type , rectObject.W , rectObject.H , Measure )
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	FillPolygon_Solid( Points := "50 , 50 | 100 , 100 | 150 , 50 | 50 , 50 " , Color := "0xFFFF0000" ){
		local Brush := This._CreateBrush_Solid( color )
		This._FillPolygon( Brush , points )
		This._DeleteBrush( Brush )
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	_FillPolygon( pBrush , points ){
		Gdip_FillPolygon( This.G , pBrush , Points ) 
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	PolygonShapes( HomeVector , Color := "0xFF000000" , Radius := 100 , StartAngle := 0 , Sides := 4 , returnString := 1 , AddExtraWrapArm := 0 , ReturnWinSetRegion := 0 , AutoUpdate := 0 ){
		local outputShapeString := This._PolygonShapes( HomeVector , Radius , StartAngle , Sides , returnString , AddExtraWrapArm , ReturnWinSetRegion )
		This.FillPolygon_Solid( outputShapeString , Color )
		;~ MsgBox, % outputShapeString
		if( Autoupdate )
			This.UpdateWindow()
	}
	DrawArrow( StartVector , EndVector , color := "0xFFFF0000" , borderColor := "0xFF000000" , HeadLength := 25 , NeckLength := 2 , ArmLength := 12 , ElbowLength := 4 , AutoUpdate := 0 ){
		local ArrowPoints 
		ArrowPoints := New ArrowHead_2( StartVector , EndVector , HeadLength , NeckLength , ArmLength , ElbowLength )
		This.FillPolygon_Solid( ArrowPoints , color )
		if( Autoupdate )
			This.UpdateWindow()
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
	_PolygonShapes( HomeVector , Radius := 100 , StartAngle := 0 , Sides := 4 , returnString := 1 , AddExtraWrapArm := 0 , ReturnWinSetRegion := 0 ){
		local StartVector , points , SpacingAngle , OutputString
		if( sides < 3 ){
			MsgBox, 262192, Error , A shape requires 3 or more sides.`nWhat you're thinking of is a line or a point.
			return
		}
		StartVector := New Vector( HomeVector )
		StartVector.SetMag( Radius )
		StartVector.SetAngle( StartAngle )
		SpacingAngle := 360 / Sides
		Points := []
		Points[ 1 ] := New Vector( StartVector )
		Points[ 1 ].Add( HomeVector )
		if( returnString )
			OutputString := Points[ 1 ].X "," Points[ 1 ].Y "|"
		Loop, % Sides - 1	{
			StartVector.RotateAngle( SpacingAngle )
			Points[ A_Index + 1 ] := New Vector( StartVector )
			Points[ A_Index + 1 ].Add( HomeVector )
			if( returnString )
				OutputString .= Points[ A_Index + 1 ].X "," Points[ A_Index + 1 ].Y "|"
		}
		if( returnString ){
			OutputString .= Points[ 1 ].X "," Points[ 1 ].Y "|"
			if( AddExtraWrapArm ) ;Adds an extra overlap so that when you use "DrawLines" the shape fully closes regardless of the thickness of the lines.
				OutputString .= Points[ 2 ].X "," Points[ 2 ].Y "|"
			if( ReturnWinSetRegion ){
				OutputString := strReplace( OutputString , "," , "-" )
				OutputString := strReplace( OutputString , "|" , " " )
			}
			return OutputString
		}
		return Points
	}
	;;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
}
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
class PopUpWindow_LayeredWindowMethods	extends PopUpWindow_Controls {
	UpdateWindow( alpha := 255 ){
		UpdateLayeredWindow( This.hwnd , This.hdc , This.X , This.Y , This.W , This.H , alpha )
	}
	ClearWindow( AutoUpdate := 0 , Color := "" ){
		if( color != "" )
			Gdip_GraphicsClear( This.G , color )
		else
			Gdip_GraphicsClear( This.G )
		if( Autoupdate )
			This.UpdateWindow()
	}
	CreateWindowGraphics(){
		if( This.hbm ){
			This.DestroyWindowsGraphics()
		}
		This.hbm := CreateDIBSection( This.W , This.H )
		This.hdc := CreateCompatibleDC()
		This.obm := SelectObject( This.hdc , This.hbm )
		This.G := Gdip_GraphicsFromHDC( This.hdc )
		Gdip_SetSmoothingMode( This.G , This.Smoothing )
		Gdip_SetInterpolationMode( This.G , This.InterpolationMode )
	}
	DestroyWindowsGraphics(){
		Gdip_DeleteGraphics( This.G )
		SelectObject( This.hdc , This.obm )
		DeleteObject( This.hbm )
		DeleteDC( This.hdc )
	}
	CreateCachedBitmap( pBitmap , Dispose := 0 ){
		local pCachedBitmap
		if( This.CachedBitmap )
			This.DisposeCachedbitmap()
		DllCall( "gdiplus\GdipCreateCachedBitmap" , "Ptr" , pBitmap , "Ptr" , this.G , "PtrP" , pCachedBitmap )
		This.CachedBitmap := pCachedBitmap
		if( Dispose )
			Gdip_DisposeImage( pBitmap )
	}
	DisposeCachedbitmap(){
		DllCall( "gdiplus\GdipDeleteCachedBitmap" , "Ptr" , This.CachedBitmap )
	}
	
}
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
class PopUpWindow_Events extends PopUpWindow_Controls	{	;class lvl = 5
	PostMoveWindow(){
		PostMessage, 0xA1 , 2
		While( GetKeyState( "LButton" , "P" ) )
			sleep, 30
		This.GetPosition()
	}
	
}
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
class PopUpWindow_Controls extends PopUpWindow_Windows	{	;class lvl = 4
	Add( controlType := "Button" , options := "" , displayValue := "" , controlName := "" , label := "" , rows := "" ){
		
		local hwnd , cc 
		
		if( label && !isObject( label ) )
			Gui, % This.Hwnd ":Add", % controlType , % options " +hwndhwnd g" label , % displayValue
		else
			Gui, % This.Hwnd ":Add", % controlType , % options " +hwndhwnd " , % displayValue
		
		if( isObject( label ) )
			GuiControl, % This.Hwnd ":+g", % hwnd , % label
		
		if( controlName = "" )
			controlName := hwnd
		This.Controls[ controlName ] := {}
		cc := This.Controls[ controlName ]
		This.ControlArray.Push( cc )
		This.ControlHandles[ hwnd ] := cc 
		
		cc.Hwnd := hwnd
		cc.Name := controlName 
		cc.Label := label 
		cc.Type := controlType
		cc.DisplayValue := displayValue
		cc.Options := options
		cc.Index := This.ControlArray.Length()
		if( rows )
			cc.Rows := rows
		
		cc.FontType := This.FontType
		cc.FontSize := This.FontSize
		cc.FontColor := This.FontColor
		cc.FontOptions := This.FontOptions
		
		This.GetControlPosition( cc )
		
		cc.Tip := ""
	}
	GetControlPosition( controlObject ){
		GuiControlGet, pos , % This.Hwnd ":pos" , % controlObject.Hwnd 
		controlObject.X := PosX
		controlObject.Y := PosY
		controlObject.W := PosW
		controlObject.H := PosH
	}
	
	SetControlList( controlObject , list := "" , choose := "" ){
		local string := ""
		if( isObject( list ) ){
			for k , v in list	
				string .= v "|"
			GuiControl, % This.Hwnd ":" , % controlObject.Hwnd , % "|" string
		}else{
			GuiControl, % This.Hwnd ":" , % controlObject.Hwnd , % "|" list
		}
		if( choose )
			GuiControl, % This.Hwnd ":Choose" , % controlObject.Hwnd , % choose
	}
	Choose( controlObject , choice := 1 ){
		GuiControl, % This.Hwnd ":Choose" , % controlObject.Hwnd , % choice
	}
	SetFocus( controlObject ){
		GuiControl, % This.Hwnd ":Focus" , % controlObject.Hwnd
	}
	Get( controlObject , subCommand := "" ){
		local outVar
		GuiControlGet, outVar , % This.Hwnd ":" subCommand , % controlObject.Hwnd
		return outVar
	}
	Set( controlObject , subCommand := "" , value := "" ){
		GuiControl, % This.Hwnd ":" subCommand , % controlObject.Hwnd , % value
	}
	SetRange( controlObject , range ){
		GuiControl, % This.Hwnd ":+Range" range , % controlObject.Hwnd 
	}
	MoveControl( controlObject , Mode := "MoveDraw" ){
		GuiControl, % This.Hwnd ":" Mode , % controlObject.Hwnd , % "x" controlObject.X " y" controlObject.Y " w" controlObject.W " h" controlObject.H 
	}
}
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
class PopUpWindow_Windows extends PopUpWindow_Settings	{	;class lvl = 3
	Show( options := "" , title := "" , transparency := "" ){
		if( title != "" )
			This.Title := title
		if( options != "" ){
			if( instr( "winSize" , options ) ){
				options := strReplace( options , "winSize" )
				Gui, % This.Hwnd ":Show", % "x" This.X " y" This.Y " w" This.W " h" This.H " " options , % This.Title
			}else{
				Gui, % This.Hwnd ":Show", % options , % This.Title
			}
		}else{
			Gui, % This.Hwnd ":Show", % "x" This.X " y" This.Y " w" This.W " h" This.H , % This.Title
		}
		This.IsVisable := 1
		if( transparency != "" )
			WinSet, Transparent , % transparency , % "ahk_id " This.Hwnd
	}
	Hide(){
		Gui, % This.Hwnd ":Hide"
		This.IsVisable := 0
	}
	Minimize(){
		Gui, % This.Hwnd ":Minimize"
	}
}
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
class PopUpWindow_Settings	extends PopUpWindow_BaseMethods	{   ;class lvl = 2
	SetMargin( x := "" , y := "" ){
		if( x != "" )
			This.MarginX := x 
		if( y != "" )
			This.MarginY := y 
		Gui, % This.Hwnd ":Margin", % This.MarginX , % This.MarginY
	}
	SetFont( type := "" , size := "" , color := "" , options := "" ){
		if( type != "" )
			This.FontType := type 
		if( size != "" )
			This.FontSize := size
		if( color != "" )
			This.FontColor := color 
		if( options != "" )
			This.FontOptions := options
		Gui, % This.Hwnd ":Font", % "norm s" This.FontSize " c" This.FontColor " " This.FontOptions , % This.FontType
	}
	SetColor( color := "" , controlColor := "" ){
		if( color != "" )
			This.Color := color
		if( controlColor != "" )
			This.ControlColor := controlColor
		Gui, % This.Hwnd ":Color", % This.Color , % This.ControlColor
	}
	SetPosition( x_or_Rect := "" , y := "" , w := "" , h := "" ){
		x := x_or_Rect
		if( isObject( x_or_Rect ) ){
			for k , v in [ "X" , "Y" , "W" , "H" ]	{
				if( x_or_Rect[ v ] != "" )
					This[ v ] := x_or_Rect[ v ]
			}
		}else{
			if( w != "" )
				This.W := w
			if( h != "" )
				This.H := h
			if( x != "" ){
				if( x = "Center" )
					This.X := ( A_ScreenWidth - This.W ) / 2
				else 
					This.X := x
			}
			if( Y != "" ){
				if( Y = "Center" )
					This.Y := ( A_ScreenHeight - This.H ) / 2
				else
					This.Y := Y	
			}
		}
	}
	SetDisabled(){
		Gui, % This.Hwnd ":+Disabled"
	}
	SetEnabled(){
		Gui, % This.Hwnd ":-Disabled"
	}
	GetPosition(){
		WinGetPos, x , y , w , h , % "ahk_id " This.Hwnd
		This.X := x 
		This.Y := y 
		This.W := w 
		This.H := h 
	}
	OwnsTips(){
		Gui, % This.Hwnd ":+OwnDialogs"
	} 
}
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
class PopUpWindow_BaseMethods	{   ;class lvl = 1
	_SetDefaults(){
		This.Hwnd := ""
		This.Label := ""
		This.Title := ""
		This.Name := ""
		
		This.X := "Center"
		This.Y := "Center"
		This.W := 300
		This.H := 300
		
		This.Color := ""
		This.ControlColor := ""
		
		This.FontColor := "000000"
		This.FontSize := 9
		This.FontType := "Arial"
		This.FontOptions := ""
		
		This.Controls := {}
		This.ControlArray := []
		This.ControlHandles := []
		
		This.isVisable := 0
		
		This.Transparency := 255
		
		This.MarginX := 10
		This.MarginY := 10
		
		This.MinWidth := ""
		This.MaxWidth := ""
		
		This.MinHeight := ""
		This.MaxHeight := ""
		
		This.Smoothing := 2
		This.InterpolationMode := 7
		
		This.AutoShow := 0
	}
	
	UpdateDefaults( defaultsObject ){
		local changeFont , changeColor , changeMargin 
		
		for k , v in defaultsObject	
			This[ k ] := defaultsObject[ k ]
		
		if( This.X = "Center" )
			This.X := ( A_ScreenWidth - This.W ) / 2
		if( This.Y = "Center" )
			This.Y := ( A_ScreenHeight - This.H ) / 2
		
	}
	UpdateGraphics(){
		This.CreateWindowGraphics()
	}
	_CreateWindow( options := "" , title := "" ){
		local hwnd
		if( title != "" )
			This.Title := title
		if( This.WindowType = "LayeredWindow" ){
			
			Gui, New, % " +hwndhwnd +E0x80000 -Caption -DPIScale " options , % This.Title
			;~ ToolTip, % "Tip:`n" "layeredWindow"
		}else{
			Gui, New, % " +hwndhwnd " options , % This.Title
		}
		This.Hwnd := hwnd
		
	}
	
	__Delete(){
		Try
			Gui, % This.Hwnd ":Destroy"
		if( This.WindowType = "LayeredWindow" )
			This.DestroyWindowsGraphics()
	}
}
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
class ArrowHead_2	{
	
	__New( Start , End , HeadLength := 30 , NeckLength := 10 , ArmLength := 30 , ElbowLength := 15 ){
		
		Master := This._NewVector( Start )
		This._SubVector( Master , End )
		
		Head := This._NewVector( Master )
		This._SetVectorMag( Head , HeadLength )
		This._AddVector( Head , End )
		
		Neck := This._NewVector( Master )
		This._SetVectorMag( Neck , NeckLength )
		This._AddVector( Neck , Head )
		
		RightArm := This._NewVector( Master , , 1 )
		This._SetVectorMag( RightArm , ArmLength )
		This._AddVector( RightArm , Neck )
		
		RightElbow := This._NewVector( Master , , 1 )
		This._SetVectorMag( RightElbow , ElbowLength )
		This._AddVector( RightElbow , Head )
		
		LeftArm := This._NewVector( Master , , 2 )
		This._SetVectorMag( LeftArm , ArmLength )
		This._AddVector( LeftArm , Neck )
		
		LeftElbow := This._NewVector( Master , , 2 )
		This._SetVectorMag( LeftElbow , ElbowLength )
		This._AddVector( LeftElbow , Head )
		
		OutputString := ""
		for k , v in [ "Start" , "RightElbow" , "RightArm" , "End" , "LeftArm" , "LeftElbow" , "Start" ]	
			OutputString .= %v%.X "," %v%.Y "|"
		return OutputString 
	}
	_NewVector( x , y := "" , rotate := 0 ){
		if( IsObject( x ) ){
			if( !rotate )
				return { X: x.X , Y: x.Y }
			else if( rotate = 1 )
				return { X: x.Y * -1 , Y: x.X }
			else if( rotate = 2 )
				return { X: x.Y , Y: x.X * -1 }
		}else{
			if( !rotate )
				return { X: x , Y: x }
			else if( rotate = 1 )
				return { X: y * -1 , Y: x }
			else if( rotate = 2 )
				return { X: y , Y: x * -1 }
		}
	}
	_SubVector( vector1 , vector2 ){
		vector1.X -= vector2.X
		vector1.Y -= vector2.Y
	}
	_AddVector( vector1 , vector2 ){
		vector1.X += vector2.X
		vector1.Y += vector2.Y
	}
	_SetVectorMag( vector , mag ){
		local m := This._GetVectorMag( vector )
		vector.X := vector.X * mag / m
		vector.Y := vector.Y * mag / m
	}
	_GetVectorMag( vector ){
		return Sqrt( vector.X * vector.X + vector.Y * vector.Y )
		
	}
}
;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
;************
;Vector Class
;**************************************************************************************************************************************************************************
;00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 
;00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 
;00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 
;**************************************************************************************************************************************************************************
Class Vector	{
	;Written By: HB
	;Date: Sept 23rd, 2022
	;Last Edit: Sept 24th, 2022
	;Purpose: Vector math class 
	;Credit: Rohwedder 
	;Resources: 
		;Line intercept concepts and code: https://www.autohotkey.com/boards/viewtopic.php?f=76&t=37175
		;Create an Arrow: https://www.autohotkey.com/boards/viewtopic.php?f=76&t=92039&p=479129#p478944
		;Getting an angle: https://www.autohotkey.com/boards/viewtopic.php?f=76&t=108760&p=483661#p483678
		;Setting an Angle: https://www.autohotkey.com/boards/viewtopic.php?f=76&t=108760&p=483786#p483811
		;
		
	static RadToDeg := 45 / ATan( 1 ) 
		, DegToRad := ATan( 1 ) / 45 
		
	__New( x := 0 , y := 0 , rotate := 0 ){ 
		if( IsObject( x ) ){
			if( rotate = 3 ){
				This.X := x.X * -1
				,This.Y := x.Y * -1
			}else if( rotate = 2 ){
				This.X := x.Y 
				,This.Y := x.X * -1
			}else if( rotate = 1 ){
				This.X := x.Y * -1
				,This.Y := x.X 
			}else{
				This.X := x.X
				,This.Y := x.Y
			}
		}else{
			if( rotate = 3 ){
				This.X := X * -1
				,This.Y := Y * -1
			}else if( rotate = 2 ){
				This.X := Y 
				,This.Y := X * -1
			}else if( rotate = 1 ){
				This.X := Y * -1
				,This.Y := X 
			}else{
				This.X := X
				,This.Y := Y
			}
		}
	}
	Add( x , y := "" ){
		if( IsObject( x ) ){
			This.X += x.X
			,This.Y += x.Y
		}else if( y = "" ){
			This.X += x 
			,This.Y += x
		}else{
			This.X += x 
			,This.Y += y 
		}
	}
	Sub( x , y := "" ){
		if( IsObject( x ) ){
			This.X -= x.X
			,This.Y -= x.Y
		}else if( y = "" ){
			This.X -= X
			,This.Y -= X
		}else{
			This.X -= X
			,This.Y -= Y
		}
	}
	Div( x , y := "" ){
		if( IsObject( x ) ){
			This.X /= x.X
			,This.Y /= x.Y
		}else if( x && y = "" ){
			This.X /= x 
			,This.Y /= x 
		}else{
			This.X /= X
			,This.Y /= Y
		}
	}
	Mult( x , y := "" ){
		if( IsObject( x ) ){
			This.X *= x.X
			,This.Y *= x.Y
		}else if( x && y = "" ){
			This.X *= x 
			,This.Y *= x 
		}else{
			This.X *= X
			,This.Y *= Y
		}
	}
	Dist( x , y := "" ){
		if( IsObject( x ) )
			return Sqrt( ( ( This.X - x.X ) **2 ) + ( ( This.Y - x.Y ) **2 ) )
		else 
			return Sqrt( ( ( This.X - X ) **2 ) + ( ( This.Y - Y ) **2 ) )
	}
	GetMag(){
		return Sqrt( This.X * This.X + This.Y * This.Y )
	}
	SetMag( magnitude ){
		local m := This.GetMag()
		This.X := This.X * magnitude / m
		,This.Y := This.Y * magnitude / m
	}
	MagSq(){
		return This.GetMag()**2
	}	
	Dot( x , y := "" ){
		if( IsObject( x ) )
			return ( This.X * x.X ) + ( This.Y * x.Y )
		else
			return ( This.X * X ) + ( This.Y * Y )
	}
	Cross( x , y := "" ){
		if( IsObject( x ) )
			return This.X * x.Y - This.Y * x.X
		else
			return This.X * Y - This.Y * X
		
	}
	Norm(){
		local m := This.GetMag()
		This.X /= m
		This.Y /= m
	}
	GetAngle(){ 
		local angle 
		( (  angle := Vector.RadToDeg * DllCall( "msvcrt\atan2" , "Double" , This.Y , "Double" , This.X , "CDECL Double" ) ) < 0 ) ? ( angle += 360 )
		return angle
	}
	SetAngle( newAngle := 0 , NewVector := 0 ){
		local Angle := This.GetAngle()
		, ChangeAngle := newAngle - Angle 
		, Co := Cos( Vector.DegToRad * ChangeAngle )
		, Si := Sin( Vector.DegToRad * ChangeAngle )
		, X := This.X 
		, Y := This.Y
		, X2 := X * Co - Y * Si 
		, Y2 := X * Si + Y * Co 
		
		if( !NewVector )
			This.X := X2 , This.Y := Y2
		else 
			return New Vector( X2 , Y2 )
	}
	RotateAngle( rotationAmount := 90 , NewVector := 0 ){
		local Co := Cos( Vector.DegToRad * rotationAmount )
		, Si := Sin( Vector.DegToRad * rotationAmount )
		, X := This.X 
		, Y := This.Y
		, X2 := X * Co - Y * Si 
		, Y2 := X * Si + Y * Co 
		
		if( !NewVector )
			This.X := X2 , This.Y := Y2
		else 
			return New Vector( X2 , Y2 )
	}
	;********************************************
	;class methods
	TestLineInterceptPoint( interceptPoint , Line1 , Line2 ){ ; Line = { Start: { X: , Y: } , End: { X: , Y: } } , interceptPoint = { X: , Y: }
		local
		for k , v in [ "X" , "Y" ]	
			M%v%_Min := min( Line1.Start[ v ] , Line1.End[ v ] )
			,M%v%_Max := max( Line1.Start[ v ] , Line1.End[ v ] )
			,L%v%_Min := min( Line2.Start[ v ] , Line2.End[ v ] )
			,L%v%_Max := max( Line2.Start[ v ] , Line2.End[ v ] )
		if( !( interceptPoint.X < Mx_Min || interceptPoint.X > Mx_Max || interceptPoint.X < Lx_Min || interceptPoint.X > Lx_Max ) && !( interceptPoint.Y < My_Min || interceptPoint.Y > My_Max || interceptPoint.Y < Ly_Min || interceptPoint.Y > Ly_Max ) )
			return 1
		return 0
	}
	GetLineInterceptPoint( Line1 , Line2 ){ ; Line = { Start: { X: , Y: } , End: { X: , Y: } }
		local A1 := Line1.End.Y - Line1.Start.Y
		,B1 := Line1.Start.X - Line1.End.X
		,C1 := A1 * Line1.Start.X + B1 * Line1.Start.Y
		,A2 := Line2.End.Y - Line2.Start.Y
		,B2 := Line2.Start.X - Line2.End.X
		,C2 := A2 * Line2.Start.X + B2 * Line2.Start.Y
		,Denominator := A1 * B2 - A2 * B1 
		return New Vector( { X: ( ( B2 * C1 - B1 * C2 ) / Denominator )  , Y: ( ( A1 * C2 - A2 * C1 ) / Denominator ) } )
	}
	;********************************************
}
;**************************************************************************************************************************************************************************
;00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 
;00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 
;00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 00000 <<<>>> 00000 
;**************************************************************************************************************************************************************************
